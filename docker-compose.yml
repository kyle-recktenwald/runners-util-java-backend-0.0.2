services:
  postgresql:
    container_name: postgresql
    hostname: postgresql
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: recktenwald_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres-data:/var/lib/postgresql/data
    networks:
      - runners_util_network
    restart: always

  auth-service:
    image: bitnami/keycloak:latest
    container_name: auth-service
    hostname: auth-service
    environment:
      #-Dkeycloak.migration.action=import (For initial run)
      JAVA_OPTS: >
        -Dkeycloak.migration.action=none
        -Dkeycloak.migration.provider=singleFile
        -Dkeycloak.migration.file=/opt/bitnami/keycloak/realm-export.json
      DB_VENDOR: postgres
      DB_ADDR: postgresql
      DB_PORT: 5432
      DB_SCHEMA: auth
      DB_DATABASE: recktenwald_db
      DB_USER: admin
      DB_PASSWORD: admin
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_USER: developer
      KEYCLOAK_PASSWORD: developer
      KC_PROXY_MODE: edge
      KC_METRICS_ENABLED: true
      KC_HTTP_ENABLED: true
      KC_HTTP_PORT: 8180
      KC_HTTPS_ENABLED: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_RELATIVE_PATH: /auth
    networks:
      - runners_util_network
    ports:
      - "8180:8180"
    depends_on:
      - postgresql
    volumes:
      - ./realm-export.json:/opt/bitnami/keycloak/realm-export.json
      - ../certs:/opt/bitnami/keycloak/certs
    restart: always

  backend-service:
    build: .
    container_name: backend-service
    hostname: backend-service
    ports:
      - "8080:8080"
    depends_on:
      - auth-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresql:5432/recktenwald_db?currentSchema=runners_util
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
    restart: always
    networks:
      - runners_util_network

  frontend-service:
    build: ~/Desktop/Repositories/Runner-Utils/runners-util-react-frontend-v5
    container_name: frontend-service
    hostname: frontend-service
    ports:
      - "3000:3000"
    depends_on:
      - backend-service
    networks:
      - runners_util_network
    restart: always

  nginx:
    image: nginx:latest
    container_name: nginx
    hostname: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ../certs:/etc/nginx/certs
    depends_on:
      - frontend-service
      - backend-service
      - auth-service
    networks:
      - runners_util_network
    restart: always

networks:
  runners_util_network:
    name: runners_util_network
    driver: bridge

volumes:
  postgres-data:
